name: Deploy to PRD

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-northeast-2
  ROOT_PATH: schedule-checker-k8s
  REPOSITORY_PATH1: schedulechecker_be_home
  REPOSITORY_PATH2: schedulechecker_be_auth
  REPOSITORY_PATH3: schedulechecker_fe
  USERNAME: seokcheonkang

jobs:
  be-home:
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ./be-home # /home/runner/work/schedule-checker/schedule-checker/be-home
    steps:
      - name: Import actions from github
        uses: actions/checkout@v3

      - name: Check build date
        run: |
          echo "BUILD_DATE=$(date '+%Y-%m-%d_%H:%M:%S')"
          echo "BUILD_ID=${GITHUB_RUN_ID}"
          echo "BUILD_REF=${GITHUB_REF}"

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: 16.17

      - name: Npm install
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get image tag(verion)
        id: image
        run: |
          VERSION=$(echo ${{ github.sha }} | cut -c1-8)
          echo VERSION=$VERSION
          echo "::set-output name=version::$VERSION"

      - name: Build, tag, and push image to Amazon ECR
        id: image-info
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.REPOSITORY_PATH1 }}
          IMAGE_TAG: ${{ steps.image.outputs.version }}
        run: |
          echo "::set-output name=ecr_repository::$ECR_REPOSITORY"
          echo "::set-output name=image_tag::$IMAGE_TAG"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v1

      - name: Checkout kustomize repository
        uses: actions/checkout@v2
        with:
          repository: ${{ env.USERNAME }}/${{ env.ROOT_PATH }}
          ref: main
          token: ${{ secrets.ACTION_TOKEN }}
          path: ${{ env.ROOT_PATH }}

      - name: Update Kubernetes resources
        run: |
          echo ${{ steps.login-ecr.outputs.registry }}
          echo ${{ steps.image-info.outputs.ecr_repository }}
          echo ${{ steps.image-info.outputs.image_tag }}
          cd ../${{ env.ROOT_PATH }}/overlays/dev
          kustomize edit set image ${{ steps.login-ecr.outputs.registry}}/${{ steps.image-info.outputs.ecr_repository }}=${{ steps.login-ecr.outputs.registry}}/${{ steps.image-info.outputs.ecr_repository }}:${{ steps.image-info.outputs.image_tag }}
          cat kustomization.yaml

      - name: Commit files
        run: |
          cd ../${{ env.ROOT_PATH }}
          git config --global user.email "seokcheon.kang@bespinglobal.com"
          git config --global user.name "seokcheonkang"
          git commit -am "Update image tag for ARGO REPOSITORY_PATH1"
          git push -u origin main
  be-auth:
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ./be-auth
    steps:
      - name: Import actions from github
        uses: actions/checkout@v3

      - name: Check build date
        run: |
          echo "BUILD_DATE=$(date '+%Y-%m-%d_%H:%M:%S')"
          echo "BUILD_ID=${GITHUB_RUN_ID}"
          echo "BUILD_REF=${GITHUB_REF}"

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: 16.17

      - name: Npm install
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get image tag(verion)
        id: image
        run: |
          VERSION=$(echo ${{ github.sha }} | cut -c1-8)
          echo VERSION=$VERSION
          echo "::set-output name=version::$VERSION"

      - name: Build, tag, and push image to Amazon ECR
        id: image-info
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.REPOSITORY_PATH2 }}
          IMAGE_TAG: ${{ steps.image.outputs.version }}
        run: |
          echo "::set-output name=ecr_repository::$ECR_REPOSITORY"
          echo "::set-output name=image_tag::$IMAGE_TAG"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v1

      - name: Checkout kustomize repository
        uses: actions/checkout@v2
        with:
          repository: ${{ env.USERNAME }}/${{ env.ROOT_PATH }}
          ref: main
          token: ${{ secrets.ACTION_TOKEN }}
          path: ${{ env.ROOT_PATH }}

      - name: Update Kubernetes resources
        run: |
          echo ${{ steps.login-ecr.outputs.registry }}
          echo ${{ steps.image-info.outputs.ecr_repository }}
          echo ${{ steps.image-info.outputs.image_tag }}
          cd ../${{ env.ROOT_PATH }}/overlays/dev
          kustomize edit set image ${{ steps.login-ecr.outputs.registry}}/${{ steps.image-info.outputs.ecr_repository }}=${{ steps.login-ecr.outputs.registry}}/${{ steps.image-info.outputs.ecr_repository }}:${{ steps.image-info.outputs.image_tag }}
          cat kustomization.yaml

      - name: Commit files
        run: |
          cd ../${{ env.ROOT_PATH }}
          git config --global user.email "seokcheon.kang@bespinglobal.com"
          git config --global user.name "seokcheonkang"
          git commit -am "Update image tag for ARGO REPOSITORY_PATH2"
          git push -u origin main
  fe:
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ./fe
    steps:
      - name: Import actions from github
        uses: actions/checkout@v3

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: 16.17

      - name: Generate Environment Variables File for Production
        run: |
          echo "VITE_APP_SERVER=$VITE_APP_SERVER" >> .env.production
          echo "VITE_APP_IS_LOG=$VITE_APP_IS_LOG" >> .env.production
          echo "VITE_APP_BASE_URL_BACKEND_HOME=$VITE_APP_BASE_URL_BACKEND_HOME" >> .env.production
          echo "VITE_APP_BASE_URL_BACKEND_AUTH=$VITE_APP_BASE_URL_BACKEND_AUTH" >> .env.production
          echo "VITE_APP_BASE_URL_FRONTEND=$VITE_APP_BASE_URL_FRONTEND" >> .env.production
          echo "VITE_APP_GOOGLE_CLIENT_ID=$VITE_APP_GOOGLE_CLIENT_ID" >> .env.production
        env:
          VITE_APP_SERVER: ${{ secrets.PRD_VITE_APP_SERVER }}
          VITE_APP_IS_LOG: ${{ secrets.PRD_VITE_APP_IS_LOG }}
          VITE_APP_BASE_URL_BACKEND_HOME: http://schedulechecker.kro.kr/home
          VITE_APP_BASE_URL_BACKEND_AUTH: http://schedulechecker.kro.kr/auth
          VITE_APP_BASE_URL_FRONTEND: http://schedulechecker.kro.kr
          VITE_APP_GOOGLE_CLIENT_ID: ${{secrets.PRD_VITE_APP_GOOGLE_CLIENT_ID}}

      - name: npm install
        run: npm ci

      - name: npm build
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get image tag(verion)
        id: image
        run: |
          VERSION=$(echo ${{ github.sha }} | cut -c1-8)
          echo VERSION=$VERSION
          echo "::set-output name=version::$VERSION"

      - name: Build, tag, and push image to Amazon ECR
        id: image-info
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.REPOSITORY_PATH3 }}
          IMAGE_TAG: ${{ steps.image.outputs.version }}
        run: |
          echo "::set-output name=ecr_repository::$ECR_REPOSITORY"
          echo "::set-output name=image_tag::$IMAGE_TAG"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v1

      - name: Checkout kustomize repository
        uses: actions/checkout@v2
        with:
          repository: ${{ env.USERNAME }}/${{ env.ROOT_PATH }}
          ref: main
          token: ${{ secrets.ACTION_TOKEN }}
          path: ${{ env.ROOT_PATH }}

      - name: Update Kubernetes resources
        run: |
          echo ${{ steps.login-ecr.outputs.registry }}
          echo ${{ steps.image-info.outputs.ecr_repository }}
          echo ${{ steps.image-info.outputs.image_tag }}
          cd ../${{ env.ROOT_PATH }}/overlays/dev
          kustomize edit set image ${{ steps.login-ecr.outputs.registry}}/${{ steps.image-info.outputs.ecr_repository }}=${{ steps.login-ecr.outputs.registry}}/${{ steps.image-info.outputs.ecr_repository }}:${{ steps.image-info.outputs.image_tag }}
          cat kustomization.yaml

      - name: Commit files
        run: |
          cd ../${{ env.ROOT_PATH }}
          git config --global user.email "seokcheon.kang@bespinglobal.com"
          git config --global user.name "seokcheonkang"
          git commit -am "Update image tag for ARGO REPOSITORY_PATH3"
          git push -u origin main
